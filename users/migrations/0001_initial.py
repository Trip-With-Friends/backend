# Generated by Django 4.0.3 on 2022-10-29 13:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('surname', models.CharField(default='', max_length=50)),
                ('name', models.CharField(default='', max_length=50)),
                ('patronymic', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('birthdate', models.DateField(default='2000-01-01')),
                ('photo', models.ImageField(null=True, upload_to='users_thumbnails')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phonenum', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True)),
                ('region', models.CharField(choices=[('MSK', 'Москва и Московская обл.'), ('LOD', 'Санкт-Петербург и область'), ('MAY', 'Адыгея'), ('GOA', 'Алтайский край'), ('BLG', 'Амурская обл.'), ('ARH', 'Архангельская обл.'), ('AST', 'Астраханская обл.'), ('UFA', 'Башкортостан(Башкирия)'), ('BEL', 'Белгородская обл.'), ('BRN', 'Брянская обл.'), ('UDE', 'Бурятия'), ('VLM', 'Владимирская обл.'), ('VLG', 'Волгоградская обл.'), ('VOL', 'Вологодская обл.'), ('VRZ', 'Воронежская обл.'), ('MAH', 'Дагестан'), ('BIR', 'Еврейская обл.'), ('IVA', 'Ивановская обл.'), ('IRK', 'Иркутская обл.'), ('NAL', 'Кабардино-Балкария'), ('KLG', 'Калининградская обл.'), ('ELI', 'Калмыкия'), ('KLG', 'Калужская обл.'), ('PTR', 'Камчатская обл.'), ('PTZ', 'Карелия'), ('KEM', 'Кемеровская обл.'), ('KIR', 'Кировская обл.'), ('SIK', 'Коми'), ('KOS', 'Костромская обл.'), ('KRD', 'Краснодарский край'), ('KRR', 'Красноярский край'), ('KUG', 'Курганская обл.'), ('KRS', 'Курская обл.'), ('LPC', 'Липецкая обл.'), ('MAG', 'Магаданская обл.'), ('ISK', 'Марий Эл'), ('SRN', 'Мордовия'), ('MUR', 'Мурманская обл.'), ('MUR', 'Нижегородская (Горьковская)'), ('NVG', 'Новгородская обл.'), ('NOV', 'Новосибирская обл.'), ('OMS', 'Омская обл.'), ('ORB', 'Оренбургская обл.'), ('ORL', 'Орловская обл.'), ('PNZ', 'Пензенская обл.'), ('PEM', 'Пермская обл.'), ('VLV', 'Приморский край'), ('PSK', 'Псковская обл.'), ('RST', 'Ростовская обл.'), ('RAZ', 'Рязанская обл.'), ('SMR', 'Самарская обл.'), ('SRT', 'Саратовская обл.'), ('YKU', 'Саха (Якутия)'), ('SHL', 'Сахалин'), ('SVE', 'Свердловская обл.'), ('VLK', 'Северная Осетия'), ('SMO', 'Смоленская обл.'), ('STV', 'Ставропольский край'), ('TMB', 'Тамбовская обл.'), ('TAT', 'Татарстан'), ('TVE', 'Тверская обл.'), ('TOM', 'Томская обл.'), ('KZL', 'Тува (Тувинская Респ.)'), ('TUL', 'Тульская обл.'), ('TYM', 'Тюменская обл.'), ('IZV', 'Удмуртия'), ('ULN', 'Ульяновская обл.'), ('URL', 'Уральская обл.'), ('HAB', 'Хабаровский край'), ('ABN', 'Хакасия'), ('HMN', 'Ханты-Мансийский АО'), ('CEL', 'Челябинская обл.'), ('GRZ', 'Чечено-Ингушетия'), ('CIT', 'Читинская обл.'), ('CEB', 'Чувашия'), ('AND', 'Чукотский АО'), ('SLH', 'Ямало-Ненецкий АО'), ('YRL', 'Ярославская обл.')], default='', max_length=5)),
                ('liveplace', models.CharField(default='', max_length=50)),
                ('description', models.TextField(blank=True, max_length=1000)),
                ('not_twf_exp', models.TextField(blank=True, max_length=1000)),
                ('allow_politics_and_processing', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
